
# This recipe prepares the server for the app deployment. Calling its default task 
# will execute the following steps:
#   + create a user to own and run the app, its username will be the app name
#   + create the app dir and grant write privileges to the app user
#   + create passenger config file in '/etc/apache2/sites-available' and
#     enable it by calling 'a2ensite' (the config template is 'templates/<application>.erb')
#
#   - default:
#     $ cap -f deploy/prepare.rb prepare_server
#
#   - deployment as sub uri:
#     $ cap -f deploy/prepare.rb prepare_server:for_sub_uri

set :application, 'mukift'

# server

  set :domain, 'localhost'
  set :port, 22

  default_run_options[:pty] = true

# roles

  role :app, domain
  role :db,  domain, :primary => true
  
# user

  Capistrano::CLI.ui.say('Please provide sudo user credentials:')
  set :user,     Capistrano::CLI.ui.ask(' > username: ')
  set :password, Capistrano::CLI.password_prompt(' > password: ')
  set :use_sudo, false

# paths

  set :apps_path, '/var/vhosts'
  set :app_root_path, "#{apps_path}/#{application}"

# app user

  set :app_user, application
  
# server setup tasks

  namespace :prepare_server do
    
    task :default do
      create_app_user
      create_app_dir
      passenger_config
    end
    
    task :for_sub_uri do
      create_app_user
      create_app_dir
    end    

    desc 'Create the app user and assign it to its group.'
    task :create_app_user, :roles => :app do
      Capistrano::CLI.ui.say("Please provide the password for the app user that will be created in the server:")      
      Capistrano::CLI.ui.say(" > username: #{app_user}")
      set :app_user_password, Capistrano::CLI.password_prompt(' > password: ')
      password_confirmation = Capistrano::CLI.password_prompt(' > confirm.: ')
      raise 'password must match password confirmation' if app_user_password != password_confirmation

      Capistrano::CLI.ui.say('Please provide the app user group (\'www-data\' on Ubuntu, or group in which Apache runs):')
      set :app_user_group, Capistrano::CLI.ui.ask(' > group: ')

      sudo("useradd --create-home --shell /bin/bash #{app_user}") {|ch, stream, out| puts "     << #{out}" }
      sudo "passwd #{app_user}" do |ch, stream, out|
        puts "     << #{out}"
        if out =~ /Enter new UNIX password:/
          ch.send_data "#{app_user_password}" + "\n"
        elsif out =~ /Retype new UNIX password:/
          ch.send_data "#{app_user_password}" + "\n"
        else
          ch.send_data "\n"
        end
      end
      sudo("adduser #{app_user} #{app_user_group}") {|ch, stream, out| puts "     << #{out}" }
    end

    desc 'Create the app dir, change its owner to app user and grant the required permissions.'
    task :create_app_dir, :roles => :app do
      unless defined?(app_user_group)
        Capistrano::CLI.ui.say('Please provide the app user group (\'www-data\' on Ubuntu, or group in which Apache runs):')
        set :app_user_group, Capistrano::CLI.ui.ask(' > group: ')
      end
      sudo "mkdir -p #{app_root_path}"
      sudo "chown #{app_user}:#{app_user_group} -R #{app_root_path}"
      sudo "chmod 775 -R #{app_root_path}"
    end

    desc 'Create Passenger config on Apache.'
    task :passenger_config, :roles => :app do
      Capistrano::CLI.ui.say('Please provide the server name parameter to be set in the passenger config file (e.g. tracker.localhost or www.mytracker.com):')
      set :passenger_server_name, Capistrano::CLI.ui.ask('> server name: ')
      set :passenger_document_root, "#{app_root_path}/current/public"

      require 'erb'
      template = ERB.new(File.read("deploy/templates/#{application}.erb"), nil, '<>')
      result = template.result(binding)
      sudo "rm -f /etc/apache2/sites-available/#{application}"
      sudo "rm -f /etc/apache2/sites-enabled/#{application}"
      put(result, "/home/#{user}/#{application}") # method 'put' do not support sudo
      sudo "mv /home/#{user}/#{application} /etc/apache2/sites-available"
      sudo "chown root:root /etc/apache2/sites-available/#{application}"
      sudo("a2ensite #{application}") {|ch, stream, out| puts "     << #{out}" }
      sudo('/etc/init.d/apache2 reload') {|ch, stream, out| puts "     << #{out}" }
    end

    desc 'Restart or start Apache.'
    task :restart_apache, :roles => :app do
      sudo '/etc/init.d/apache2 stop' do |ch, stream, out|
        puts "     << #{out}"
      end
      sudo '/etc/init.d/apache2 start' do |ch, stream, out|
        puts "     << #{out}"
      end
    end
  end







